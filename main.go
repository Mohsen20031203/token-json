package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"my-echo-app/utils"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/tebeka/selenium"
)

type Chain int

const (
	Ethereum Chain = iota
	Avalanche
	Base
	//Blast
	Arbitrum
	Polygon
	Optimism
	BscChain
	//CronosChain
)

func (c Chain) GetOneInchChainId() int {
	if c == Ethereum {
		return 1
	}
	if c == Avalanche {
		return 43114
	}
	if c == Base {
		return 8453
	}

	//if c == Blast {
	//	return 81457
	//}

	if c == Arbitrum {
		return 42161
	}
	if c == Polygon {
		return 137
	}
	if c == Optimism {
		return 10
	}
	if c == BscChain {
		return 56
	}
	//if c == CronosChain {
	//	return 25
	//}

	return 0
}

func (c Chain) GetCMCName() string {
	if c == Ethereum {
		return "Ethereum"
	}
	if c == Avalanche {
		return "Avalanche"
	}
	if c == Base {
		return "Base"
	}
	//if c == Blast {
	//	return ?
	//}
	if c == Arbitrum {
		return "Arbitrum"
	}
	if c == Polygon {
		return "Polygon"
	}
	if c == Optimism {
		return "Optimism"
	}
	if c == BscChain {
		return "BSC"
	}

	//if c == CronosChain {
	//	return ?
	//}
	return ""
}

type AutoGenerated struct {
	Status interface{} `json:"status"`
	Data   map[string]struct {
		ID                            int           `json:"id"`
		Name                          string        `json:"name"`
		Symbol                        string        `json:"symbol"`
		Category                      string        `json:"category"`
		Slug                          string        `json:"slug"`
		Subreddit                     string        `json:"subreddit"`
		TagNames                      []interface{} `json:"tag-names"`
		TagGroups                     []interface{} `json:"tag-groups"`
		TwitterUsername               string        `json:"twitter_username"`
		IsHidden                      int           `json:"is_hidden"`
		DateLaunched                  interface{}   `json:"date_launched"`
		ContractAddress               []interface{} `json:"contract_address"`
		SelfReportedCirculatingSupply interface{}   `json:"self_reported_circulating_supply"`
		SelfReportedTags              interface{}   `json:"self_reported_tags"`
		SelfReportedMarketCap         interface{}   `json:"self_reported_market_cap"`
		InfiniteSupply                bool          `json:"infinite_supply"`
		Status                        string        `json:"status"`
	} `json:"data"`
}

const (
	coinMarketURL = "https://coinmarketcap.com/"
	browserPort   = 5555
)

type webDriver struct {
	driver selenium.WebDriver
}

func newDriver() webDriver {
	caps := selenium.Capabilities{"browserName": "chrome"}
	driver, err := selenium.NewRemote(caps, fmt.Sprintf("http://localhost:%d/wd/hub", browserPort))
	if err != nil {
		log.Fatalf("Error creating WebDriver session: %v", err)
	}

	err = driver.MaximizeWindow("")
	if err != nil {
		log.Fatalf("Error maximizing window: %v", err)
	}

	return webDriver{driver: driver}
}

func (wd webDriver) fetchContract(contract string) (string, error) {
	var searchBox selenium.WebElement
	var err error
	var xpath string
	var coin selenium.WebElement

	if err := wd.driver.Get(coinMarketURL); err != nil {
		log.Fatalf("failed to load page: %v", err)
	}
	// Wait for the page to load

	for i := 0; ; i++ {

		xpath := `//*[@id="__next"]/div[2]/div[1]/div[1]/div[2]/div[1]/div[2]/div[2]/div/div[1]`
		searchBox, err = wd.driver.FindElement(selenium.ByXPATH, xpath)
		if err == nil {
			break
		} else {
			if i >= 10 {
				return "0", fmt.Errorf("error")
			} else {
				time.Sleep(1 * time.Second)
			}
		}
	}

	// click on search box to load search box modal
	searchBox.Click()
	time.Sleep(20 * time.Second)
	xpath = `/html/body/div[3]/div[5]/div/div/div/div[1]/div[1]/div[1]/input`
	searchBoxModal, err := searchBox.FindElement(selenium.ByXPATH, xpath)
	if err != nil {
		log.Fatalf("Could not find search box: %v", err)
	}

	// Type the contract address into the search box
	searchBoxModal.Click()
	if err := searchBoxModal.SendKeys(contract); err != nil {
		log.Fatalf("Error typing into search box: %v", err)
	}

	// Wait for the search results to load
	time.Sleep(3 * time.Second)
	xpath = `/html/body/div[3]/div[5]/div/div/div/div[1]/div[3]/div[1]`
	coin, err = wd.driver.FindElement(selenium.ByXPATH, xpath)
	if err != nil {
		return "0", err
	}

	divText, err := coin.Text()
	if err != nil {
		log.Fatalf("failed to get text: %v", err)
	}

	if !strings.Contains(divText, "Cryptoassets") {
		return "0", fmt.Errorf("not found cmcId")
	}
	xpath = `/html/body/div[3]/div[5]/div/div/div/div[1]/div[3]/div[1]/a/div`
	coin, err = wd.driver.FindElement(selenium.ByXPATH, xpath)
	if err != nil {
		return "0", err
	}

	// Click on the first search result
	coin.Click()
	time.Sleep(6 * time.Second)

	// Wait for the page to load
	pgSource, err := wd.driver.PageSource()
	if err != nil {
		log.Fatalf("Error to get page source: %v", err)
	}

	// Find the first match
	re := regexp.MustCompile(`"id":(\d+)`)
	m := re.FindStringSubmatch(pgSource)
	return m[1], nil

}

func fetchAndProcessURL(ch Chain) (utils.TokenData, error) {

	url := fmt.Sprintf("https://api.vultisig.com/1inch/swap/v6.0/%v/tokens", ch.GetOneInchChainId())
	resp, err := http.Get(url)
	if err != nil {
		return utils.TokenData{}, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return utils.TokenData{}, err
	}

	var tokenData utils.TokenData
	if err := json.Unmarshal(body, &tokenData); err != nil {
		return utils.TokenData{}, err
	}

	return tokenData, nil
}

func main() {
	wbd := newDriver()

	defer wbd.driver.Quit()
	ch := []Chain{
		//Blast,
		BscChain,
		Base,
		Arbitrum,
		Ethereum,
		Polygon,
		Optimism,
		Avalanche,
		//CronosChain,
	}
	for _, nameChain := range ch {
		var tokenData utils.TokenData
		var err error
		var numberWrite int

		nameFile := fmt.Sprintf("tokens%v.json", nameChain.GetCMCName())
		file, err := os.OpenFile(nameFile, os.O_RDWR|os.O_CREATE, 0644)
		if err != nil {
			fmt.Println("Error opening/creating file:", err)
			return
		}
		defer file.Close()

		utils.ReadFile(file, &tokenData)

		for key, value := range tokenData.Tokens {
			/*
				if value.CmcID != "0" {
					if !checkID(value.Symbol, key, value.CmcID) {
						fmt.Println(key, value.CmcID)
					}
				}
			*/

			if value.CmcID != "" {
				continue
			}
			ucid, err := wbd.fetchContract(key)
			if err != nil {

				if !strings.Contains(err.Error(), "no such element") && !strings.Contains(err.Error(), "not found cmcId") {
					fmt.Println(err)
					return
				}
			}
			fmt.Println(key + " : " + ucid)
			token := tokenData.Tokens[key]
			token.CmcID = ucid
			tokenData.Tokens[key] = token

			numberWrite++
			if numberWrite > 5 {
				numberWrite = 0
				utils.WriteFile(file, &tokenData)
			}

		}

		utils.WriteFile(file, &tokenData)
		numberCmcid(tokenData, string(nameFile))

	}
}

func checkID(nameChain, addres string, id string) bool {
	var respostId AutoGenerated
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return false
	}
	apiUrl := fmt.Sprintf("https://api.vultisig.com/cmc/v2/cryptocurrency/quotes/latest?id=%d", idInt)
	resp, err := http.Get(apiUrl)
	if err != nil {
		return false
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return false
	}

	err = json.Unmarshal(body, &respostId)
	if err != nil {
		return false
	}

	return false

}

var array []string

func fetchTokenPrice(address string) (int, error) {
	var tokenData AutoGenerated

	apiUrl := fmt.Sprintf("https://api.vultisig.com/cmc/v1/cryptocurrency/info?address=%s&skip_invalid=true&aux=status", address)
	resp, err := http.Get(apiUrl)
	if resp.StatusCode == 400 {
		return 0, nil
	}
	if resp.StatusCode == 429 {
		return 0, fmt.Errorf("error for request api %s", apiUrl)
	}
	if err != nil {
		return 0, fmt.Errorf("error for request api %s", apiUrl)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return 0, err
	}

	if err := json.Unmarshal(body, &tokenData); err != nil {
		fmt.Print(body)
		return 0, err
	}

	for _, m := range tokenData.Data {
		if m.ID == 0 {
			return 0, fmt.Errorf("erro for not found id")
		}
		return m.ID, nil
	}
	array = append(array, address)
	fmt.Println("add to array")
	return 0, nil

}

func numberCmcid(tokenData utils.TokenData, namechain string) {
	var z_cmcid int
	var cmcid int
	for _, value := range tokenData.Tokens {
		if value.CmcID == "0" {
			z_cmcid++
		} else if value.CmcID != "0" {
			cmcid++
		}

	}

	file, err := os.OpenFile("file.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	result := fmt.Sprintf("%s\nallToken: %d\nCorrect cmcids: %d\ncmcids that are zero: %d\n\n",
		namechain, len(tokenData.Tokens), cmcid, z_cmcid)
	_, err = file.WriteString(result)
	if err != nil {
		log.Fatal(err)
	}
}
