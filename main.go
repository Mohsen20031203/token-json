package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"my-echo-app/utils"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
)

type Chain int

const (
	Ethereum Chain = iota
	Avalanche
	Base
	//Blast
	Arbitrum
	Polygon
	Optimism
	BscChain
	//CronosChain
)

func (c Chain) GetOneInchChainId() int {
	if c == Ethereum {
		return 1
	}
	if c == Avalanche {
		return 43114
	}
	if c == Base {
		return 8453
	}

	//if c == Blast {
	//	return 81457
	//}

	if c == Arbitrum {
		return 42161
	}
	if c == Polygon {
		return 137
	}
	if c == Optimism {
		return 10
	}
	if c == BscChain {
		return 56
	}
	//if c == CronosChain {
	//	return 25
	//}

	return 0
}

func (c Chain) GetCMCName() string {
	if c == Ethereum {
		return "Ethereum"
	}
	if c == Avalanche {
		return "Avalanche"
	}
	if c == Base {
		return "Base"
	}
	//if c == Blast {
	//	return ?
	//}
	if c == Arbitrum {
		return "Arbitrum"
	}
	if c == Polygon {
		return "Polygon"
	}
	if c == Optimism {
		return "Optimism"
	}
	if c == BscChain {
		return "BSC"
	}

	//if c == CronosChain {
	//	return ?
	//}
	return ""
}

type AutoGenerated struct {
	Status interface{} `json:"status"`
	Data   map[string]struct {
		ID                            int           `json:"id"`
		Name                          string        `json:"name"`
		Symbol                        string        `json:"symbol"`
		Category                      string        `json:"category"`
		Slug                          string        `json:"slug"`
		Subreddit                     string        `json:"subreddit"`
		TagNames                      []interface{} `json:"tag-names"`
		TagGroups                     []interface{} `json:"tag-groups"`
		TwitterUsername               string        `json:"twitter_username"`
		IsHidden                      int           `json:"is_hidden"`
		DateLaunched                  interface{}   `json:"date_launched"`
		ContractAddress               []interface{} `json:"contract_address"`
		SelfReportedCirculatingSupply interface{}   `json:"self_reported_circulating_supply"`
		SelfReportedTags              interface{}   `json:"self_reported_tags"`
		SelfReportedMarketCap         interface{}   `json:"self_reported_market_cap"`
		InfiniteSupply                bool          `json:"infinite_supply"`
		Status                        string        `json:"status"`
	} `json:"data"`
}

func fetchAndProcessURL(ch Chain) (utils.TokenData, error) {

	url := fmt.Sprintf("https://api.vultisig.com/1inch/swap/v6.0/%v/tokens", ch.GetOneInchChainId())
	resp, err := http.Get(url)
	if err != nil {
		return utils.TokenData{}, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return utils.TokenData{}, err
	}

	var tokenData utils.TokenData
	if err := json.Unmarshal(body, &tokenData); err != nil {
		return utils.TokenData{}, err
	}

	return tokenData, nil
}

func main() {
	ch := []Chain{
		Avalanche,
		Ethereum,
		Base,
		//Blast,
		Arbitrum,
		Polygon,
		Optimism,
		BscChain,
		//CronosChain,
	}
	for _, nameChain := range ch {
		var tokenData utils.TokenData
		var err error
		var numberWrite int

		nameFile := fmt.Sprintf("tokens%v.json", nameChain.GetCMCName())
		file, err := os.OpenFile(nameFile, os.O_RDWR|os.O_CREATE, 0644)
		if err != nil {
			fmt.Println("Error opening/creating file:", err)
			return
		}
		defer file.Close()

		fileInfo, err := file.Stat()
		if err != nil {
			fmt.Println(err)
		}

		if fileInfo.Size() == 0 {
			tokenData, err = fetchAndProcessURL(nameChain)
			if err != nil {
				return
			}
		} else {
			utils.ReadFile(file, &tokenData)
		}
		for key, value := range tokenData.Tokens {
			/*
				if value.CmcID != "0" {
					if !checkID(value.Symbol, key, value.CmcID) {
						fmt.Println(key, value.CmcID)
					}
				}
			*/

			if value.CmcID != "" {
				continue
			}
			var cmcid int
			time.Sleep(time.Second * 1)

			for i := 0; i < 5; i++ {
				cmcid, err = fetchTokenPrice(key)
				if err != nil {

					if strings.Contains(err.Error(), "error for request api https://api.vultisig.com/cmc/v1") {
						fmt.Println(err)
						time.Sleep(time.Second * 20)
						if i == 4 {
							return
						}
						continue
					} else {
						fmt.Println(err)
						return
					}
				}
				break
			}

			fmt.Println(cmcid)

			token := tokenData.Tokens[key]
			token.CmcID = strconv.Itoa(cmcid)
			tokenData.Tokens[key] = token

			numberWrite++
			if numberWrite > 20 {
				numberWrite = 0
				utils.WriteFile(file, &tokenData)
			}
		}

		utils.WriteFile(file, &tokenData)
		numberCmcid(tokenData, string(nameFile))

	}
}

func checkID(nameChain, addres string, id string) bool {
	var respostId AutoGenerated
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return false
	}
	apiUrl := fmt.Sprintf("https://api.vultisig.com/cmc/v2/cryptocurrency/quotes/latest?id=%d", idInt)
	resp, err := http.Get(apiUrl)
	if err != nil {
		return false
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return false
	}

	err = json.Unmarshal(body, &respostId)
	if err != nil {
		return false
	}

	return false

}

var array []string

func fetchTokenPrice(address string) (int, error) {
	var tokenData AutoGenerated

	apiUrl := fmt.Sprintf("https://api.vultisig.com/cmc/v1/cryptocurrency/info?address=%s&skip_invalid=true&aux=status", address)
	resp, err := http.Get(apiUrl)
	if resp.StatusCode == 400 {
		return 0, nil
	}
	if resp.StatusCode == 429 {
		return 0, fmt.Errorf("error for request api %s", apiUrl)
	}
	if err != nil {
		return 0, fmt.Errorf("error for request api %s", apiUrl)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return 0, err
	}

	if err := json.Unmarshal(body, &tokenData); err != nil {
		fmt.Print(body)
		return 0, err
	}

	for _, m := range tokenData.Data {
		if m.ID == 0 {
			return 0, fmt.Errorf("erro for not found id")
		}
		return m.ID, nil
	}
	array = append(array, address)
	fmt.Println("add to array")
	return 0, nil

}

func numberCmcid(tokenData utils.TokenData, namechain string) {
	var z_cmcid int
	var cmcid int
	for _, value := range tokenData.Tokens {
		if value.CmcID == "0" {
			z_cmcid++
		} else if value.CmcID != "0" {
			cmcid++
		}

	}

	file, err := os.OpenFile("file.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	result := fmt.Sprintf("%s\nallToken: %d\nCorrect cmcids: %d\ncmcids that are zero: %d\n\n",
		namechain, len(tokenData.Tokens), cmcid, z_cmcid)
	_, err = file.WriteString(result)
	if err != nil {
		log.Fatal(err)
	}
}
